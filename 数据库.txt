-- 校区表
CREATE TABLE campus (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(200),
    contact_person VARCHAR(50),
    contact_phone VARCHAR(20),
    email VARCHAR(50),
    parent_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_id) REFERENCES campus(id)
);

-- 用户表（所有用户类型的基表）
CREATE TABLE user (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    real_name VARCHAR(50) NOT NULL,
    gender ENUM('MALE', 'FEMALE'),
    age INT,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(50),
    avatar VARCHAR(200),
    user_type ENUM('SUPER_ADMIN', 'CAMPUS_ADMIN', 'COACH', 'STUDENT') NOT NULL,
    campus_id INT,
    status ENUM('PENDING', 'ACTIVE', 'INACTIVE') DEFAULT 'ACTIVE',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (campus_id) REFERENCES campus(id)
);

-- 教练表（修改后）
CREATE TABLE coach (
    user_id INT PRIMARY KEY,  -- 使用user_id作为主键，不再有独立的id
    level ENUM('SENIOR', 'INTERMEDIATE', 'JUNIOR') NOT NULL,
    awards TEXT,
    hourly_rate DECIMAL(10, 2) NOT NULL,
    max_students INT DEFAULT 20,
    current_students INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES user(id)
);

-- 学员表（修改后）
CREATE TABLE student (
    user_id INT PRIMARY KEY,  -- 使用user_id作为主键，不再有独立的id
    balance DECIMAL(10, 2) DEFAULT 0.00,
    cancel_count INT DEFAULT 0,
    last_cancel_month DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES user(id)
);

-- 教练-学员关系表（修改后）
CREATE TABLE coach_student_relation (
    id INT PRIMARY KEY AUTO_INCREMENT,
    coach_user_id INT NOT NULL,  -- 改为引用user.id
    student_user_id INT NOT NULL,  -- 改为引用user.id
    status ENUM('PENDING', 'APPROVED', 'REJECTED') DEFAULT 'PENDING',
    apply_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approve_time TIMESTAMP NULL,
    FOREIGN KEY (coach_user_id) REFERENCES user(id),
    FOREIGN KEY (student_user_id) REFERENCES user(id),
    UNIQUE KEY unique_coach_student (coach_user_id, student_user_id)
);

-- 球台表
CREATE TABLE court (
    id INT PRIMARY KEY AUTO_INCREMENT,
    campus_id INT NOT NULL,
    court_number VARCHAR(20) NOT NULL,
    status ENUM('AVAILABLE', 'OCCUPIED', 'MAINTENANCE') DEFAULT 'AVAILABLE',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (campus_id) REFERENCES campus(id)
);

-- 课程表（修改后）
CREATE TABLE course (
    id INT PRIMARY KEY AUTO_INCREMENT,
    coach_user_id INT NOT NULL,  -- 改为引用user.id
    student_user_id INT NOT NULL,  -- 改为引用user.id
    court_id INT,
    start_time DATETIME NOT NULL,
    end_time DATETIME NOT NULL,
    duration DECIMAL(4, 2) NOT NULL,
    fee DECIMAL(10, 2) NOT NULL,
    status ENUM('PENDING', 'CONFIRMED', 'COMPLETED', 'CANCELLED') DEFAULT 'PENDING',
    cancel_reason VARCHAR(200),
    cancel_by_user_id INT,  -- 改为引用user.id
    cancel_time DATETIME,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (coach_user_id) REFERENCES user(id),
    FOREIGN KEY (student_user_id) REFERENCES user(id),
    FOREIGN KEY (court_id) REFERENCES court(id),
    FOREIGN KEY (cancel_by_user_id) REFERENCES user(id)
);

-- 支付记录表
CREATE TABLE payment (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    payment_type ENUM('RECHARGE', 'COURSE_FEE', 'REFUND', 'CONTEST_FEE') NOT NULL,
    payment_method ENUM('WECHAT', 'ALIPAY', 'OFFLINE') NOT NULL,
    order_id VARCHAR(50),
    status ENUM('PENDING', 'SUCCESS', 'FAILED') DEFAULT 'PENDING',
    related_id INT, -- 关联的课程ID或比赛ID
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES user(id)
);

-- 评价表（修改后）
CREATE TABLE evaluation (
    id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT NOT NULL,
    from_user_id INT NOT NULL,
    to_user_id INT NOT NULL,
    content TEXT NOT NULL,
    rating INT,
    type ENUM('STUDENT_TO_COACH', 'COACH_TO_STUDENT') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (course_id) REFERENCES course(id),
    FOREIGN KEY (from_user_id) REFERENCES user(id),
    FOREIGN KEY (to_user_id) REFERENCES user(id)
);

-- 月赛表
CREATE TABLE monthly_contest (
    id INT PRIMARY KEY AUTO_INCREMENT,
    campus_id INT NOT NULL,
    contest_date DATE NOT NULL,
    group_type ENUM('A', 'B', 'C') NOT NULL,
    status ENUM('UPCOMING', 'ONGOING', 'COMPLETED') DEFAULT 'UPCOMING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (campus_id) REFERENCES campus(id)
);

-- 月赛报名表（修改后）
CREATE TABLE contest_enrollment (
    id INT PRIMARY KEY AUTO_INCREMENT,
    contest_id INT NOT NULL,
    student_user_id INT NOT NULL,  -- 改为引用user.id
    group_type ENUM('A', 'B', 'C') NOT NULL,
    status ENUM('REGISTERED', 'PAID') DEFAULT 'REGISTERED',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (contest_id) REFERENCES monthly_contest(id),
    FOREIGN KEY (student_user_id) REFERENCES user(id),
    UNIQUE KEY unique_contest_student (contest_id, student_user_id)
);

-- 比赛安排表（修改后）
CREATE TABLE contest_schedule (
    id INT PRIMARY KEY AUTO_INCREMENT,
    contest_id INT NOT NULL,
    round_number INT NOT NULL,
    player1_user_id INT NOT NULL,  -- 改为引用user.id
    player2_user_id INT,  -- 改为引用user.id
    court_id INT,
    start_time DATETIME,
    winner_user_id INT,  -- 改为引用user.id
    status ENUM('PENDING', 'ONGOING', 'COMPLETED') DEFAULT 'PENDING',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (contest_id) REFERENCES monthly_contest(id),
    FOREIGN KEY (player1_user_id) REFERENCES user(id),
    FOREIGN KEY (player2_user_id) REFERENCES user(id),
    FOREIGN KEY (court_id) REFERENCES court(id),
    FOREIGN KEY (winner_user_id) REFERENCES user(id)
);

-- 系统日志表
CREATE TABLE system_log (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    operation VARCHAR(200) NOT NULL,
    module VARCHAR(50) NOT NULL,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES user(id)
);

-- 系统授权表
CREATE TABLE system_license (
    id INT PRIMARY KEY AUTO_INCREMENT,
    license_key VARCHAR(100) UNIQUE NOT NULL,
    campus_id INT NOT NULL,
    activation_date DATE NOT NULL,
    expiration_date DATE NOT NULL,
    status ENUM('ACTIVE', 'EXPIRED') DEFAULT 'ACTIVE',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (campus_id) REFERENCES campus(id)
);

-- 插入校区数据
INSERT INTO campus (name, address, contact_person, contact_phone, email, parent_id) VALUES
('中心校区', '北京市海淀区中关村大街1号', '张校长', '13800138000', 'center@pingpong.edu', NULL),
('海淀分校区', '北京市海淀区学院路2号', '李主任', '13800138001', 'haidian@pingpong.edu', 1),
('朝阳分校区', '北京市朝阳区建国路3号', '王主任', '13800138002', 'chaoyang@pingpong.edu', 1);

-- 插入用户数据（密码统一为：jlu123456!）
INSERT INTO user (username, password, real_name, gender, age, phone, email, avatar, user_type, campus_id, status) VALUES
-- 超级管理员（中心校区）
('superadmin', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '张校长', 'MALE', 45, '13800138000', 'super@pingpong.edu', NULL, 'SUPER_ADMIN', 1, 'ACTIVE'),

-- 校区管理员
('admin_haidian', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '李主任', 'MALE', 40, '13800138001', 'admin_haidian@pingpong.edu', NULL, 'CAMPUS_ADMIN', 2, 'ACTIVE'),
('admin_chaoyang', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '王主任', 'FEMALE', 38, '13800138002', 'admin_chaoyang@pingpong.edu', NULL, 'CAMPUS_ADMIN', 3, 'ACTIVE'),

-- 教练
('coach_li', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '李教练', 'MALE', 35, '13900139001', 'coach_li@pingpong.edu', 'li.jpg', 'COACH', 2, 'ACTIVE'),
('coach_wang', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '王教练', 'FEMALE', 32, '13900139002', 'coach_wang@pingpong.edu', 'wang.jpg', 'COACH', 2, 'ACTIVE'),
('coach_zhang', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '张教练', 'MALE', 28, '13900139003', 'coach_zhang@pingpong.edu', 'zhang.jpg', 'COACH', 3, 'ACTIVE'),

-- 学员
('student1', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '小明', 'MALE', 12, '13100131001', 'student1@example.com', NULL, 'STUDENT', 2, 'ACTIVE'),
('student2', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '小红', 'FEMALE', 11, '13100131002', 'student2@example.com', NULL, 'STUDENT', 2, 'ACTIVE'),
('student3', '$2a$10$r6oAvUOcNBgwuxLpzg9GX.gDLroxFsf.Ee2tL7C8BKqQuSythn1cG', '小刚', 'MALE', 13, '13100131003', 'student3@example.com', NULL, 'STUDENT', 3, 'ACTIVE');

-- 插入教练数据（使用user_id作为主键）
INSERT INTO coach (user_id, level, awards, hourly_rate, max_students, current_students) VALUES
(4, 'SENIOR', '全国锦标赛冠军', 200.00, 20, 0),
(5, 'INTERMEDIATE', '省级比赛亚军', 150.00, 20, 0),
(6, 'JUNIOR', '市级比赛季军', 80.00, 20, 0);

-- 插入学员数据（使用user_id作为主键）
INSERT INTO student (user_id, balance, cancel_count, last_cancel_month) VALUES
(7, 500.00, 0, NULL),
(8, 300.00, 0, NULL),
(9, 200.00, 0, NULL);

-- 插入教练-学员关系数据（使用user_id）
INSERT INTO coach_student_relation (coach_user_id, student_user_id, status, approve_time) VALUES
(4, 7, 'APPROVED', NOW()),  -- 李教练指导小明
(5, 8, 'APPROVED', NOW());  -- 王教练指导小红

-- 插入球台数据
INSERT INTO court (campus_id, court_number, status) VALUES
(2, 'Court-01', 'AVAILABLE'),
(2, 'Court-02', 'AVAILABLE'),
(3, 'Court-01', 'AVAILABLE');

-- 插入课程数据（使用user_id）
INSERT INTO course (coach_user_id, student_user_id, court_id, start_time, end_time, duration, fee, status) VALUES
(4, 7, 1, '2025-09-15 10:00:00', '2025-09-15 11:00:00', 1.0, 200.00, 'CONFIRMED'),  -- 李教练指导小明
(5, 8, 2, '2025-09-16 14:00:00', '2025-09-16 15:00:00', 1.0, 150.00, 'PENDING');  -- 王教练指导小红

-- 插入支付记录数据
INSERT INTO payment (user_id, amount, payment_type, payment_method, order_id, status, related_id) VALUES
(7, 500.00, 'RECHARGE', 'WECHAT', 'ORDER_001', 'SUCCESS', NULL),  -- 小明充值
(8, 300.00, 'RECHARGE', 'ALIPAY', 'ORDER_002', 'SUCCESS', NULL),  -- 小红充值
(7, 200.00, 'COURSE_FEE', 'WECHAT', 'ORDER_003', 'SUCCESS', 1);  -- 小明支付课程费用

-- 插入评价数据
INSERT INTO evaluation (course_id, from_user_id, to_user_id, content, rating, type) VALUES
(1, 7, 4, '教练教得很好，收获很大！', 5, 'STUDENT_TO_COACH'),  -- 小明评价李教练
(1, 4, 7, '学生认真，进步很快。', 5, 'COACH_TO_STUDENT');  -- 李教练评价小明

-- 插入月赛数据
INSERT INTO monthly_contest (campus_id, contest_date, group_type, status) VALUES
(2, '2025-09-28', 'A', 'UPCOMING');

-- 插入月赛报名数据（使用user_id）
INSERT INTO contest_enrollment (contest_id, student_user_id, group_type, status) VALUES
(1, 7, 'A', 'PAID'),  -- 小明报名
(1, 8, 'A', 'PAID');  -- 小红报名

-- 插入比赛安排数据（使用user_id）
INSERT INTO contest_schedule (contest_id, round_number, player1_user_id, player2_user_id, court_id, start_time, status) VALUES
(1, 1, 7, 8, 1, '2025-09-28 10:00:00', 'PENDING');  -- 小明vs小红

-- 插入系统日志数据
INSERT INTO system_log (user_id, operation, module, ip_address) VALUES
(1, '登录系统', 'AUTH', '192.168.1.1'),
(7, '预约课程', 'COURSE', '192.168.1.2');

-- 插入系统授权数据
INSERT INTO system_license (license_key, campus_id, activation_date, expiration_date, status) VALUES
('LIC-2025-001', 1, '2025-01-01', '2026-01-01', 'ACTIVE');